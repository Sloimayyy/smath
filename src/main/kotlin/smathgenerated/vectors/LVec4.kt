package com.sloimay.smath.vectors

import java.util.*
import kotlin.math.*

data class LVec4(val x: Long, val y: Long, val z: Long, val w: Long) {

    companion object {
        fun splat(value: Byte) = LVec4(value, value, value, value)
        fun splat(value: Short) = LVec4(value, value, value, value)
        fun splat(value: Int) = LVec4(value, value, value, value)
        fun splat(value: Long) = LVec4(value, value, value, value)
        fun splat(value: Float) = LVec4(value, value, value, value)
        fun splat(value: Double) = LVec4(value, value, value, value)
        fun new(x: Byte, y: Byte, z: Byte, w: Byte) = LVec4(x, y, z, w)
        fun new(x: Short, y: Short, z: Short, w: Short) = LVec4(x, y, z, w)
        fun new(x: Int, y: Int, z: Int, w: Int) = LVec4(x, y, z, w)
        fun new(x: Long, y: Long, z: Long, w: Long) = LVec4(x, y, z, w)
        fun new(x: Float, y: Float, z: Float, w: Float) = LVec4(x, y, z, w)
        fun new(x: Double, y: Double, z: Double, w: Double) = LVec4(x, y, z, w)
        fun eye(index: Int, value: Long = 1L): LVec4 {
            require(index in 0 until 4) { 
                "Index out of bounds of the range [0; 4). (Got ${index})."
            }
            return LVec4(if (index == 0) value else 0L, if (index == 1) value else 0L, if (index == 2) value else 0L, if (index == 3) value else 0L)
        }

        fun fromArray(array: LongArray): LVec4 {
            require(array.size == 4) { 
                "Inputted array isn't of the same dimensions as the vector we're trying to create. Expected 4, got ${array.size}."
            }
            return LVec4(array[0], array[1], array[2], array[3])
        }

        val X: LVec4 = LVec4(1L, 0L, 0L, 0L)
        val Y: LVec4 = LVec4(0L, 1L, 0L, 0L)
        val Z: LVec4 = LVec4(0L, 0L, 1L, 0L)
        val W: LVec4 = LVec4(0L, 0L, 0L, 1L)
        val ZERO: LVec4 = LVec4(0L)
        val ONE: LVec4 = LVec4(1L)
        val MIN: LVec4 = LVec4(Long.MIN_VALUE)
        val MAX: LVec4 = LVec4(Long.MAX_VALUE)
    }

    constructor(value: Byte) : this(value.toLong(), value.toLong(), value.toLong(), value.toLong())
    constructor(x: Byte, y: Byte, z: Byte, w: Byte) : this(x.toLong(), y.toLong(), z.toLong(), w.toLong())
    constructor(value: Short) : this(value.toLong(), value.toLong(), value.toLong(), value.toLong())
    constructor(x: Short, y: Short, z: Short, w: Short) : this(x.toLong(), y.toLong(), z.toLong(), w.toLong())
    constructor(value: Int) : this(value.toLong(), value.toLong(), value.toLong(), value.toLong())
    constructor(x: Int, y: Int, z: Int, w: Int) : this(x.toLong(), y.toLong(), z.toLong(), w.toLong())
    constructor(value: Long) : this(value, value, value, value)
    constructor(value: Float) : this(value.toLong(), value.toLong(), value.toLong(), value.toLong())
    constructor(x: Float, y: Float, z: Float, w: Float) : this(x.toLong(), y.toLong(), z.toLong(), w.toLong())
    constructor(value: Double) : this(value.toLong(), value.toLong(), value.toLong(), value.toLong())
    constructor(x: Double, y: Double, z: Double, w: Double) : this(x.toLong(), y.toLong(), z.toLong(), w.toLong())
    constructor() : this(0L, 0L, 0L, 0L)
    constructor(lamb: (Int) -> Long) : this(lamb(0), lamb(1), lamb(2), lamb(3))

    operator fun plus(other: LVec4) = LVec4(x + other.x, y + other.y, z + other.z, w + other.w)
    operator fun plus(other: Long) = LVec4(x + other, y + other, z + other, w + other)
    operator fun minus(other: LVec4) = LVec4(x - other.x, y - other.y, z - other.z, w - other.w)
    operator fun minus(other: Long) = LVec4(x - other, y - other, z - other, w - other)
    operator fun times(other: LVec4) = LVec4(x * other.x, y * other.y, z * other.z, w * other.w)
    operator fun times(other: Long) = LVec4(x * other, y * other, z * other, w * other)
    operator fun div(other: LVec4) = LVec4(x / other.x, y / other.y, z / other.z, w / other.w)
    operator fun div(other: Long) = LVec4(x / other, y / other, z / other, w / other)
    operator fun rem(other: LVec4) = LVec4(x % other.x, y % other.y, z % other.z, w % other.w)
    operator fun rem(other: Long) = LVec4(x % other, y % other, z % other, w % other)
    operator fun unaryPlus() = this
    operator fun unaryMinus() = LVec4(-x, -y, -z, -w)
    operator fun get(idx: Byte): Long {
        require(idx in 0 until 4) { 
            "LVec4 indexing failed. Index should be in the range of 0 to 3 (inclusive) but got ${idx}."
        }
        return when (idx.toInt()) { 0 -> x; 1 -> y; 2 -> z; else -> w }
    }
    operator fun get(idx: Short): Long {
        require(idx in 0 until 4) { 
            "LVec4 indexing failed. Index should be in the range of 0 to 3 (inclusive) but got ${idx}."
        }
        return when (idx.toInt()) { 0 -> x; 1 -> y; 2 -> z; else -> w }
    }
    operator fun get(idx: Int): Long {
        require(idx in 0 until 4) { 
            "LVec4 indexing failed. Index should be in the range of 0 to 3 (inclusive) but got ${idx}."
        }
        return when (idx) { 0 -> x; 1 -> y; 2 -> z; else -> w }
    }
    operator fun get(idx: Long): Long {
        require(idx in 0 until 4) { 
            "LVec4 indexing failed. Index should be in the range of 0 to 3 (inclusive) but got ${idx}."
        }
        return when (idx.toInt()) { 0 -> x; 1 -> y; 2 -> z; else -> w }
    }

    fun toBVec4() = BVec4(x.toByte(), y.toByte(), z.toByte(), w.toByte())
    fun toSVec4() = SVec4(x.toShort(), y.toShort(), z.toShort(), w.toShort())
    fun toIVec4() = IVec4(x.toInt(), y.toInt(), z.toInt(), w.toInt())
    fun toVec4() = Vec4(x.toFloat(), y.toFloat(), z.toFloat(), w.toFloat())
    fun toDVec4() = DVec4(x.toDouble(), y.toDouble(), z.toDouble(), w.toDouble())

    fun eq(other: LVec4) = x == other.x && y == other.y && z == other.z && w == other.w
    fun iter(): Iterator<Long> {
        return object : Iterator<Long> {
            private var idx = 0
            override fun hasNext() = idx < 4
            override fun next() = this@LVec4[idx++]
        }
    }
    fun seq() = iter().asSequence()
    fun abs() = LVec4(abs(x), abs(y), abs(z), abs(w))
    fun mod(value: Long) = LVec4(x.mod(value), y.mod(value), z.mod(value), w.mod(value))
    fun mod(other: LVec4) = LVec4(x.mod(other.x), y.mod(other.y), z.mod(other.z), w.mod(other.w))
    fun min(other: LVec4) = LVec4(min(x, other.x), min(y, other.y), min(z, other.z), min(w, other.w))
    fun max(other: LVec4) = LVec4(max(x, other.x), max(y, other.y), max(z, other.z), max(w, other.w))
    fun clamp(low: LVec4, high: LVec4) = LVec4(max(min(x, high.x), low.x), max(min(y, high.y), low.y), max(min(z, high.z), low.z), max(min(w, high.w), low.w))
    fun dot(other: LVec4) = x * other.x + y * other.y + z * other.z + w * other.w
    fun lenSq() = dot(this)
    fun len() = sqrt(lenSq().toDouble())
    fun dist(other: LVec4) = (this.toDVec4() - other.toDVec4()).len()
    fun distSq(other: LVec4) = (this.toDVec4() - other.toDVec4()).lenSq()
    fun normalize() = toDVec4() / len()
    fun dir() = toDVec4() / len()
    fun elementSum() = x + y + z + w
    fun eSum() = x + y + z + w
    fun elementProd() = x * y * z * w
    fun eProd() = x * y * z * w
    fun minElement() = min(min(x, y), min(z, w))
    fun eMin() = min(min(x, y), min(z, w))
    fun maxElement() = max(max(x, y), max(z, w))
    fun eMax() = max(max(x, y), max(z, w))
    fun indexOfMin() = when (eMin()) { x -> 0; y -> 1; z -> 2; else -> 3 }
    fun indexOfMax() = when (eMax()) { x -> 0; y -> 1; z -> 2; else -> 3 }
    fun manhattan(other: LVec4) = (this - other).abs().eSum()
    fun toArray() = longArrayOf(x, y, z, w)
    fun lerp(other: LVec4, t: Double) = this.toDVec4() * (1.0 - t) + other.toDVec4() * t
    fun floorDiv(other: LVec4) = LVec4(x.floorDiv(other.x), y.floorDiv(other.y), z.floorDiv(other.z), w.floorDiv(other.w))
    fun floorDiv(other: Long) = LVec4(x.floorDiv(other), y.floorDiv(other), z.floorDiv(other), w.floorDiv(other))

    infix fun and(other: LVec4) = LVec4(x and other.x, y and other.y, z and other.z, w and other.w)
    infix fun and(other: Long) = LVec4(x and other, y and other, z and other, w and other)
    infix fun or(other: LVec4) = LVec4(x or other.x, y or other.y, z or other.z, w or other.w)
    infix fun or(other: Long) = LVec4(x or other, y or other, z or other, w or other)
    infix fun xor(other: LVec4) = LVec4(x xor other.x, y xor other.y, z xor other.z, w xor other.w)
    infix fun xor(other: Long) = LVec4(x xor other, y xor other, z xor other, w xor other)
    infix fun shl(other: LVec4) = LVec4(x shl other.x.toInt(), y shl other.y.toInt(), z shl other.z.toInt(), w shl other.w.toInt())
    infix fun shl(other: Long) = LVec4(x shl other.toInt(), y shl other.toInt(), z shl other.toInt(), w shl other.toInt())
    infix fun shr(other: LVec4) = LVec4(x shr other.x.toInt(), y shr other.y.toInt(), z shr other.z.toInt(), w shr other.w.toInt())
    infix fun shr(other: Long) = LVec4(x shr other.toInt(), y shr other.toInt(), z shr other.toInt(), w shr other.toInt())
    infix fun ushr(other: LVec4) = LVec4(x ushr other.x.toInt(), y ushr other.y.toInt(), z ushr other.z.toInt(), w ushr other.w.toInt())
    infix fun ushr(other: Long) = LVec4(x ushr other.toInt(), y ushr other.toInt(), z ushr other.toInt(), w ushr other.toInt())
    fun inv() = LVec4(x.inv(), y.inv(), z.inv(), w.inv())

    fun withElement(elementIdx: Int, value: Byte) = when (elementIdx) { 0 -> withX(value); 1 -> withY(value); 2 -> withZ(value); else -> withW(value) }
    fun withElement(elementIdx: Int, value: Short) = when (elementIdx) { 0 -> withX(value); 1 -> withY(value); 2 -> withZ(value); else -> withW(value) }
    fun withElement(elementIdx: Int, value: Int) = when (elementIdx) { 0 -> withX(value); 1 -> withY(value); 2 -> withZ(value); else -> withW(value) }
    fun withElement(elementIdx: Int, value: Long) = when (elementIdx) { 0 -> withX(value); 1 -> withY(value); 2 -> withZ(value); else -> withW(value) }
    fun withElement(elementIdx: Int, value: Float) = when (elementIdx) { 0 -> withX(value); 1 -> withY(value); 2 -> withZ(value); else -> withW(value) }
    fun withElement(elementIdx: Int, value: Double) = when (elementIdx) { 0 -> withX(value); 1 -> withY(value); 2 -> withZ(value); else -> withW(value) }
    fun perm(other: BVec2) = LVec2(this[other.x.toInt()], this[other.y.toInt()])
    fun perm(other: SVec2) = LVec2(this[other.x.toInt()], this[other.y.toInt()])
    fun perm(other: IVec2) = LVec2(this[other.x], this[other.y])
    fun perm(other: LVec2) = LVec2(this[other.x.toInt()], this[other.y.toInt()])
    fun perm(other: BVec3) = LVec3(this[other.x.toInt()], this[other.y.toInt()], this[other.z.toInt()])
    fun perm(other: SVec3) = LVec3(this[other.x.toInt()], this[other.y.toInt()], this[other.z.toInt()])
    fun perm(other: IVec3) = LVec3(this[other.x], this[other.y], this[other.z])
    fun perm(other: LVec3) = LVec3(this[other.x.toInt()], this[other.y.toInt()], this[other.z.toInt()])
    fun perm(other: BVec4) = LVec4(this[other.x.toInt()], this[other.y.toInt()], this[other.z.toInt()], this[other.w.toInt()])
    fun perm(other: SVec4) = LVec4(this[other.x.toInt()], this[other.y.toInt()], this[other.z.toInt()], this[other.w.toInt()])
    fun perm(other: IVec4) = LVec4(this[other.x], this[other.y], this[other.z], this[other.w])
    fun perm(other: LVec4) = LVec4(this[other.x.toInt()], this[other.y.toInt()], this[other.z.toInt()], this[other.w.toInt()])
    fun withX(value: Byte) = LVec4(value.toLong(), y, z, w)
    fun withX(value: Short) = LVec4(value.toLong(), y, z, w)
    fun withX(value: Int) = LVec4(value.toLong(), y, z, w)
    fun withX(value: Long) = LVec4(value, y, z, w)
    fun withX(value: Float) = LVec4(value.toLong(), y, z, w)
    fun withX(value: Double) = LVec4(value.toLong(), y, z, w)
    fun withY(value: Byte) = LVec4(x, value.toLong(), z, w)
    fun withY(value: Short) = LVec4(x, value.toLong(), z, w)
    fun withY(value: Int) = LVec4(x, value.toLong(), z, w)
    fun withY(value: Long) = LVec4(x, value, z, w)
    fun withY(value: Float) = LVec4(x, value.toLong(), z, w)
    fun withY(value: Double) = LVec4(x, value.toLong(), z, w)
    fun withZ(value: Byte) = LVec4(x, y, value.toLong(), w)
    fun withZ(value: Short) = LVec4(x, y, value.toLong(), w)
    fun withZ(value: Int) = LVec4(x, y, value.toLong(), w)
    fun withZ(value: Long) = LVec4(x, y, value, w)
    fun withZ(value: Float) = LVec4(x, y, value.toLong(), w)
    fun withZ(value: Double) = LVec4(x, y, value.toLong(), w)
    fun withW(value: Byte) = LVec4(x, y, z, value.toLong())
    fun withW(value: Short) = LVec4(x, y, z, value.toLong())
    fun withW(value: Int) = LVec4(x, y, z, value.toLong())
    fun withW(value: Long) = LVec4(x, y, z, value)
    fun withW(value: Float) = LVec4(x, y, z, value.toLong())
    fun withW(value: Double) = LVec4(x, y, z, value.toLong())

    val xx get() = LVec2(x, x)
    val xy get() = LVec2(x, y)
    val xz get() = LVec2(x, z)
    val xw get() = LVec2(x, w)
    val yx get() = LVec2(y, x)
    val yy get() = LVec2(y, y)
    val yz get() = LVec2(y, z)
    val yw get() = LVec2(y, w)
    val zx get() = LVec2(z, x)
    val zy get() = LVec2(z, y)
    val zz get() = LVec2(z, z)
    val zw get() = LVec2(z, w)
    val wx get() = LVec2(w, x)
    val wy get() = LVec2(w, y)
    val wz get() = LVec2(w, z)
    val ww get() = LVec2(w, w)
    val xxx get() = LVec3(x, x, x)
    val xxy get() = LVec3(x, x, y)
    val xxz get() = LVec3(x, x, z)
    val xxw get() = LVec3(x, x, w)
    val xyx get() = LVec3(x, y, x)
    val xyy get() = LVec3(x, y, y)
    val xyz get() = LVec3(x, y, z)
    val xyw get() = LVec3(x, y, w)
    val xzx get() = LVec3(x, z, x)
    val xzy get() = LVec3(x, z, y)
    val xzz get() = LVec3(x, z, z)
    val xzw get() = LVec3(x, z, w)
    val xwx get() = LVec3(x, w, x)
    val xwy get() = LVec3(x, w, y)
    val xwz get() = LVec3(x, w, z)
    val xww get() = LVec3(x, w, w)
    val yxx get() = LVec3(y, x, x)
    val yxy get() = LVec3(y, x, y)
    val yxz get() = LVec3(y, x, z)
    val yxw get() = LVec3(y, x, w)
    val yyx get() = LVec3(y, y, x)
    val yyy get() = LVec3(y, y, y)
    val yyz get() = LVec3(y, y, z)
    val yyw get() = LVec3(y, y, w)
    val yzx get() = LVec3(y, z, x)
    val yzy get() = LVec3(y, z, y)
    val yzz get() = LVec3(y, z, z)
    val yzw get() = LVec3(y, z, w)
    val ywx get() = LVec3(y, w, x)
    val ywy get() = LVec3(y, w, y)
    val ywz get() = LVec3(y, w, z)
    val yww get() = LVec3(y, w, w)
    val zxx get() = LVec3(z, x, x)
    val zxy get() = LVec3(z, x, y)
    val zxz get() = LVec3(z, x, z)
    val zxw get() = LVec3(z, x, w)
    val zyx get() = LVec3(z, y, x)
    val zyy get() = LVec3(z, y, y)
    val zyz get() = LVec3(z, y, z)
    val zyw get() = LVec3(z, y, w)
    val zzx get() = LVec3(z, z, x)
    val zzy get() = LVec3(z, z, y)
    val zzz get() = LVec3(z, z, z)
    val zzw get() = LVec3(z, z, w)
    val zwx get() = LVec3(z, w, x)
    val zwy get() = LVec3(z, w, y)
    val zwz get() = LVec3(z, w, z)
    val zww get() = LVec3(z, w, w)
    val wxx get() = LVec3(w, x, x)
    val wxy get() = LVec3(w, x, y)
    val wxz get() = LVec3(w, x, z)
    val wxw get() = LVec3(w, x, w)
    val wyx get() = LVec3(w, y, x)
    val wyy get() = LVec3(w, y, y)
    val wyz get() = LVec3(w, y, z)
    val wyw get() = LVec3(w, y, w)
    val wzx get() = LVec3(w, z, x)
    val wzy get() = LVec3(w, z, y)
    val wzz get() = LVec3(w, z, z)
    val wzw get() = LVec3(w, z, w)
    val wwx get() = LVec3(w, w, x)
    val wwy get() = LVec3(w, w, y)
    val wwz get() = LVec3(w, w, z)
    val www get() = LVec3(w, w, w)
    val xxxx get() = LVec4(x, x, x, x)
    val xxxy get() = LVec4(x, x, x, y)
    val xxxz get() = LVec4(x, x, x, z)
    val xxxw get() = LVec4(x, x, x, w)
    val xxyx get() = LVec4(x, x, y, x)
    val xxyy get() = LVec4(x, x, y, y)
    val xxyz get() = LVec4(x, x, y, z)
    val xxyw get() = LVec4(x, x, y, w)
    val xxzx get() = LVec4(x, x, z, x)
    val xxzy get() = LVec4(x, x, z, y)
    val xxzz get() = LVec4(x, x, z, z)
    val xxzw get() = LVec4(x, x, z, w)
    val xxwx get() = LVec4(x, x, w, x)
    val xxwy get() = LVec4(x, x, w, y)
    val xxwz get() = LVec4(x, x, w, z)
    val xxww get() = LVec4(x, x, w, w)
    val xyxx get() = LVec4(x, y, x, x)
    val xyxy get() = LVec4(x, y, x, y)
    val xyxz get() = LVec4(x, y, x, z)
    val xyxw get() = LVec4(x, y, x, w)
    val xyyx get() = LVec4(x, y, y, x)
    val xyyy get() = LVec4(x, y, y, y)
    val xyyz get() = LVec4(x, y, y, z)
    val xyyw get() = LVec4(x, y, y, w)
    val xyzx get() = LVec4(x, y, z, x)
    val xyzy get() = LVec4(x, y, z, y)
    val xyzz get() = LVec4(x, y, z, z)
    val xyzw get() = LVec4(x, y, z, w)
    val xywx get() = LVec4(x, y, w, x)
    val xywy get() = LVec4(x, y, w, y)
    val xywz get() = LVec4(x, y, w, z)
    val xyww get() = LVec4(x, y, w, w)
    val xzxx get() = LVec4(x, z, x, x)
    val xzxy get() = LVec4(x, z, x, y)
    val xzxz get() = LVec4(x, z, x, z)
    val xzxw get() = LVec4(x, z, x, w)
    val xzyx get() = LVec4(x, z, y, x)
    val xzyy get() = LVec4(x, z, y, y)
    val xzyz get() = LVec4(x, z, y, z)
    val xzyw get() = LVec4(x, z, y, w)
    val xzzx get() = LVec4(x, z, z, x)
    val xzzy get() = LVec4(x, z, z, y)
    val xzzz get() = LVec4(x, z, z, z)
    val xzzw get() = LVec4(x, z, z, w)
    val xzwx get() = LVec4(x, z, w, x)
    val xzwy get() = LVec4(x, z, w, y)
    val xzwz get() = LVec4(x, z, w, z)
    val xzww get() = LVec4(x, z, w, w)
    val xwxx get() = LVec4(x, w, x, x)
    val xwxy get() = LVec4(x, w, x, y)
    val xwxz get() = LVec4(x, w, x, z)
    val xwxw get() = LVec4(x, w, x, w)
    val xwyx get() = LVec4(x, w, y, x)
    val xwyy get() = LVec4(x, w, y, y)
    val xwyz get() = LVec4(x, w, y, z)
    val xwyw get() = LVec4(x, w, y, w)
    val xwzx get() = LVec4(x, w, z, x)
    val xwzy get() = LVec4(x, w, z, y)
    val xwzz get() = LVec4(x, w, z, z)
    val xwzw get() = LVec4(x, w, z, w)
    val xwwx get() = LVec4(x, w, w, x)
    val xwwy get() = LVec4(x, w, w, y)
    val xwwz get() = LVec4(x, w, w, z)
    val xwww get() = LVec4(x, w, w, w)
    val yxxx get() = LVec4(y, x, x, x)
    val yxxy get() = LVec4(y, x, x, y)
    val yxxz get() = LVec4(y, x, x, z)
    val yxxw get() = LVec4(y, x, x, w)
    val yxyx get() = LVec4(y, x, y, x)
    val yxyy get() = LVec4(y, x, y, y)
    val yxyz get() = LVec4(y, x, y, z)
    val yxyw get() = LVec4(y, x, y, w)
    val yxzx get() = LVec4(y, x, z, x)
    val yxzy get() = LVec4(y, x, z, y)
    val yxzz get() = LVec4(y, x, z, z)
    val yxzw get() = LVec4(y, x, z, w)
    val yxwx get() = LVec4(y, x, w, x)
    val yxwy get() = LVec4(y, x, w, y)
    val yxwz get() = LVec4(y, x, w, z)
    val yxww get() = LVec4(y, x, w, w)
    val yyxx get() = LVec4(y, y, x, x)
    val yyxy get() = LVec4(y, y, x, y)
    val yyxz get() = LVec4(y, y, x, z)
    val yyxw get() = LVec4(y, y, x, w)
    val yyyx get() = LVec4(y, y, y, x)
    val yyyy get() = LVec4(y, y, y, y)
    val yyyz get() = LVec4(y, y, y, z)
    val yyyw get() = LVec4(y, y, y, w)
    val yyzx get() = LVec4(y, y, z, x)
    val yyzy get() = LVec4(y, y, z, y)
    val yyzz get() = LVec4(y, y, z, z)
    val yyzw get() = LVec4(y, y, z, w)
    val yywx get() = LVec4(y, y, w, x)
    val yywy get() = LVec4(y, y, w, y)
    val yywz get() = LVec4(y, y, w, z)
    val yyww get() = LVec4(y, y, w, w)
    val yzxx get() = LVec4(y, z, x, x)
    val yzxy get() = LVec4(y, z, x, y)
    val yzxz get() = LVec4(y, z, x, z)
    val yzxw get() = LVec4(y, z, x, w)
    val yzyx get() = LVec4(y, z, y, x)
    val yzyy get() = LVec4(y, z, y, y)
    val yzyz get() = LVec4(y, z, y, z)
    val yzyw get() = LVec4(y, z, y, w)
    val yzzx get() = LVec4(y, z, z, x)
    val yzzy get() = LVec4(y, z, z, y)
    val yzzz get() = LVec4(y, z, z, z)
    val yzzw get() = LVec4(y, z, z, w)
    val yzwx get() = LVec4(y, z, w, x)
    val yzwy get() = LVec4(y, z, w, y)
    val yzwz get() = LVec4(y, z, w, z)
    val yzww get() = LVec4(y, z, w, w)
    val ywxx get() = LVec4(y, w, x, x)
    val ywxy get() = LVec4(y, w, x, y)
    val ywxz get() = LVec4(y, w, x, z)
    val ywxw get() = LVec4(y, w, x, w)
    val ywyx get() = LVec4(y, w, y, x)
    val ywyy get() = LVec4(y, w, y, y)
    val ywyz get() = LVec4(y, w, y, z)
    val ywyw get() = LVec4(y, w, y, w)
    val ywzx get() = LVec4(y, w, z, x)
    val ywzy get() = LVec4(y, w, z, y)
    val ywzz get() = LVec4(y, w, z, z)
    val ywzw get() = LVec4(y, w, z, w)
    val ywwx get() = LVec4(y, w, w, x)
    val ywwy get() = LVec4(y, w, w, y)
    val ywwz get() = LVec4(y, w, w, z)
    val ywww get() = LVec4(y, w, w, w)
    val zxxx get() = LVec4(z, x, x, x)
    val zxxy get() = LVec4(z, x, x, y)
    val zxxz get() = LVec4(z, x, x, z)
    val zxxw get() = LVec4(z, x, x, w)
    val zxyx get() = LVec4(z, x, y, x)
    val zxyy get() = LVec4(z, x, y, y)
    val zxyz get() = LVec4(z, x, y, z)
    val zxyw get() = LVec4(z, x, y, w)
    val zxzx get() = LVec4(z, x, z, x)
    val zxzy get() = LVec4(z, x, z, y)
    val zxzz get() = LVec4(z, x, z, z)
    val zxzw get() = LVec4(z, x, z, w)
    val zxwx get() = LVec4(z, x, w, x)
    val zxwy get() = LVec4(z, x, w, y)
    val zxwz get() = LVec4(z, x, w, z)
    val zxww get() = LVec4(z, x, w, w)
    val zyxx get() = LVec4(z, y, x, x)
    val zyxy get() = LVec4(z, y, x, y)
    val zyxz get() = LVec4(z, y, x, z)
    val zyxw get() = LVec4(z, y, x, w)
    val zyyx get() = LVec4(z, y, y, x)
    val zyyy get() = LVec4(z, y, y, y)
    val zyyz get() = LVec4(z, y, y, z)
    val zyyw get() = LVec4(z, y, y, w)
    val zyzx get() = LVec4(z, y, z, x)
    val zyzy get() = LVec4(z, y, z, y)
    val zyzz get() = LVec4(z, y, z, z)
    val zyzw get() = LVec4(z, y, z, w)
    val zywx get() = LVec4(z, y, w, x)
    val zywy get() = LVec4(z, y, w, y)
    val zywz get() = LVec4(z, y, w, z)
    val zyww get() = LVec4(z, y, w, w)
    val zzxx get() = LVec4(z, z, x, x)
    val zzxy get() = LVec4(z, z, x, y)
    val zzxz get() = LVec4(z, z, x, z)
    val zzxw get() = LVec4(z, z, x, w)
    val zzyx get() = LVec4(z, z, y, x)
    val zzyy get() = LVec4(z, z, y, y)
    val zzyz get() = LVec4(z, z, y, z)
    val zzyw get() = LVec4(z, z, y, w)
    val zzzx get() = LVec4(z, z, z, x)
    val zzzy get() = LVec4(z, z, z, y)
    val zzzz get() = LVec4(z, z, z, z)
    val zzzw get() = LVec4(z, z, z, w)
    val zzwx get() = LVec4(z, z, w, x)
    val zzwy get() = LVec4(z, z, w, y)
    val zzwz get() = LVec4(z, z, w, z)
    val zzww get() = LVec4(z, z, w, w)
    val zwxx get() = LVec4(z, w, x, x)
    val zwxy get() = LVec4(z, w, x, y)
    val zwxz get() = LVec4(z, w, x, z)
    val zwxw get() = LVec4(z, w, x, w)
    val zwyx get() = LVec4(z, w, y, x)
    val zwyy get() = LVec4(z, w, y, y)
    val zwyz get() = LVec4(z, w, y, z)
    val zwyw get() = LVec4(z, w, y, w)
    val zwzx get() = LVec4(z, w, z, x)
    val zwzy get() = LVec4(z, w, z, y)
    val zwzz get() = LVec4(z, w, z, z)
    val zwzw get() = LVec4(z, w, z, w)
    val zwwx get() = LVec4(z, w, w, x)
    val zwwy get() = LVec4(z, w, w, y)
    val zwwz get() = LVec4(z, w, w, z)
    val zwww get() = LVec4(z, w, w, w)
    val wxxx get() = LVec4(w, x, x, x)
    val wxxy get() = LVec4(w, x, x, y)
    val wxxz get() = LVec4(w, x, x, z)
    val wxxw get() = LVec4(w, x, x, w)
    val wxyx get() = LVec4(w, x, y, x)
    val wxyy get() = LVec4(w, x, y, y)
    val wxyz get() = LVec4(w, x, y, z)
    val wxyw get() = LVec4(w, x, y, w)
    val wxzx get() = LVec4(w, x, z, x)
    val wxzy get() = LVec4(w, x, z, y)
    val wxzz get() = LVec4(w, x, z, z)
    val wxzw get() = LVec4(w, x, z, w)
    val wxwx get() = LVec4(w, x, w, x)
    val wxwy get() = LVec4(w, x, w, y)
    val wxwz get() = LVec4(w, x, w, z)
    val wxww get() = LVec4(w, x, w, w)
    val wyxx get() = LVec4(w, y, x, x)
    val wyxy get() = LVec4(w, y, x, y)
    val wyxz get() = LVec4(w, y, x, z)
    val wyxw get() = LVec4(w, y, x, w)
    val wyyx get() = LVec4(w, y, y, x)
    val wyyy get() = LVec4(w, y, y, y)
    val wyyz get() = LVec4(w, y, y, z)
    val wyyw get() = LVec4(w, y, y, w)
    val wyzx get() = LVec4(w, y, z, x)
    val wyzy get() = LVec4(w, y, z, y)
    val wyzz get() = LVec4(w, y, z, z)
    val wyzw get() = LVec4(w, y, z, w)
    val wywx get() = LVec4(w, y, w, x)
    val wywy get() = LVec4(w, y, w, y)
    val wywz get() = LVec4(w, y, w, z)
    val wyww get() = LVec4(w, y, w, w)
    val wzxx get() = LVec4(w, z, x, x)
    val wzxy get() = LVec4(w, z, x, y)
    val wzxz get() = LVec4(w, z, x, z)
    val wzxw get() = LVec4(w, z, x, w)
    val wzyx get() = LVec4(w, z, y, x)
    val wzyy get() = LVec4(w, z, y, y)
    val wzyz get() = LVec4(w, z, y, z)
    val wzyw get() = LVec4(w, z, y, w)
    val wzzx get() = LVec4(w, z, z, x)
    val wzzy get() = LVec4(w, z, z, y)
    val wzzz get() = LVec4(w, z, z, z)
    val wzzw get() = LVec4(w, z, z, w)
    val wzwx get() = LVec4(w, z, w, x)
    val wzwy get() = LVec4(w, z, w, y)
    val wzwz get() = LVec4(w, z, w, z)
    val wzww get() = LVec4(w, z, w, w)
    val wwxx get() = LVec4(w, w, x, x)
    val wwxy get() = LVec4(w, w, x, y)
    val wwxz get() = LVec4(w, w, x, z)
    val wwxw get() = LVec4(w, w, x, w)
    val wwyx get() = LVec4(w, w, y, x)
    val wwyy get() = LVec4(w, w, y, y)
    val wwyz get() = LVec4(w, w, y, z)
    val wwyw get() = LVec4(w, w, y, w)
    val wwzx get() = LVec4(w, w, z, x)
    val wwzy get() = LVec4(w, w, z, y)
    val wwzz get() = LVec4(w, w, z, z)
    val wwzw get() = LVec4(w, w, z, w)
    val wwwx get() = LVec4(w, w, w, x)
    val wwwy get() = LVec4(w, w, w, y)
    val wwwz get() = LVec4(w, w, w, z)
    val wwww get() = LVec4(w, w, w, w)

    override fun toString(): String {
        return ("LVec4(" + 
                "x=$x, " + 
                "y=$y, " + 
                "z=$z, " + 
                "w=$w)")
    }

}

operator fun Long.plus(other: LVec4) = LVec4(this + other.x, this + other.y, this + other.z, this + other.w)
operator fun Long.minus(other: LVec4) = LVec4(this - other.x, this - other.y, this - other.z, this - other.w)
operator fun Long.times(other: LVec4) = LVec4(this * other.x, this * other.y, this * other.z, this * other.w)
operator fun Long.div(other: LVec4) = LVec4(this / other.x, this / other.y, this / other.z, this / other.w)
operator fun Long.rem(other: LVec4) = LVec4(this % other.x, this % other.y, this % other.z, this % other.w)

fun lvec4(value: Byte) = LVec4(value.toLong())
fun lvec4(x: Byte, y: Byte, z: Byte, w: Byte) = LVec4(x.toLong(), y.toLong(), z.toLong(), w.toLong())
fun lvec4(value: Short) = LVec4(value.toLong())
fun lvec4(x: Short, y: Short, z: Short, w: Short) = LVec4(x.toLong(), y.toLong(), z.toLong(), w.toLong())
fun lvec4(value: Int) = LVec4(value.toLong())
fun lvec4(x: Int, y: Int, z: Int, w: Int) = LVec4(x.toLong(), y.toLong(), z.toLong(), w.toLong())
fun lvec4(value: Long) = LVec4(value)
fun lvec4(x: Long, y: Long, z: Long, w: Long) = LVec4(x, y, z, w)
fun lvec4(value: Float) = LVec4(value.toLong())
fun lvec4(x: Float, y: Float, z: Float, w: Float) = LVec4(x.toLong(), y.toLong(), z.toLong(), w.toLong())
fun lvec4(value: Double) = LVec4(value.toLong())
fun lvec4(x: Double, y: Double, z: Double, w: Double) = LVec4(x.toLong(), y.toLong(), z.toLong(), w.toLong())
fun lvec4() = LVec4()
