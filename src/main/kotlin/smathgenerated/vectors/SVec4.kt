package com.sloimay.smath.vectors

import java.util.*
import kotlin.math.*

data class SVec4(val x: Short, val y: Short, val z: Short, val w: Short) {

    companion object {
        fun splat(value: Byte) = SVec4(value, value, value, value)
        fun splat(value: Short) = SVec4(value, value, value, value)
        fun splat(value: Int) = SVec4(value, value, value, value)
        fun splat(value: Long) = SVec4(value, value, value, value)
        fun splat(value: Float) = SVec4(value, value, value, value)
        fun splat(value: Double) = SVec4(value, value, value, value)
        fun new(x: Byte, y: Byte, z: Byte, w: Byte) = SVec4(x, y, z, w)
        fun new(x: Short, y: Short, z: Short, w: Short) = SVec4(x, y, z, w)
        fun new(x: Int, y: Int, z: Int, w: Int) = SVec4(x, y, z, w)
        fun new(x: Long, y: Long, z: Long, w: Long) = SVec4(x, y, z, w)
        fun new(x: Float, y: Float, z: Float, w: Float) = SVec4(x, y, z, w)
        fun new(x: Double, y: Double, z: Double, w: Double) = SVec4(x, y, z, w)
        fun eye(index: Int, value: Short = 1.toShort()): SVec4 {
            require(index in 0 until 4) { 
                "Index out of bounds of the range [0; 4). (Got ${index})."
            }
            return SVec4(if (index == 0) value else 0.toShort(), if (index == 1) value else 0.toShort(), if (index == 2) value else 0.toShort(), if (index == 3) value else 0.toShort())
        }

        fun fromArray(array: ShortArray): SVec4 {
            require(array.size == 4) { 
                "Inputted array isn't of the same dimensions as the vector we're trying to create. Expected 4, got ${array.size}."
            }
            return SVec4(array[0], array[1], array[2], array[3])
        }

        val X: SVec4 = SVec4(1.toShort(), 0.toShort(), 0.toShort(), 0.toShort())
        val Y: SVec4 = SVec4(0.toShort(), 1.toShort(), 0.toShort(), 0.toShort())
        val Z: SVec4 = SVec4(0.toShort(), 0.toShort(), 1.toShort(), 0.toShort())
        val W: SVec4 = SVec4(0.toShort(), 0.toShort(), 0.toShort(), 1.toShort())
        val ZERO: SVec4 = SVec4(0.toShort())
        val ONE: SVec4 = SVec4(1.toShort())
        val MIN: SVec4 = SVec4(Short.MIN_VALUE)
        val MAX: SVec4 = SVec4(Short.MAX_VALUE)
    }

    constructor(value: Byte) : this(value.toShort(), value.toShort(), value.toShort(), value.toShort())
    constructor(x: Byte, y: Byte, z: Byte, w: Byte) : this(x.toShort(), y.toShort(), z.toShort(), w.toShort())
    constructor(value: Short) : this(value, value, value, value)
    constructor(value: Int) : this(value.toShort(), value.toShort(), value.toShort(), value.toShort())
    constructor(x: Int, y: Int, z: Int, w: Int) : this(x.toShort(), y.toShort(), z.toShort(), w.toShort())
    constructor(value: Long) : this(value.toShort(), value.toShort(), value.toShort(), value.toShort())
    constructor(x: Long, y: Long, z: Long, w: Long) : this(x.toShort(), y.toShort(), z.toShort(), w.toShort())
    constructor(value: Float) : this(value.toInt().toShort(), value.toInt().toShort(), value.toInt().toShort(), value.toInt().toShort())
    constructor(x: Float, y: Float, z: Float, w: Float) : this(x.toInt().toShort(), y.toInt().toShort(), z.toInt().toShort(), w.toInt().toShort())
    constructor(value: Double) : this(value.toInt().toShort(), value.toInt().toShort(), value.toInt().toShort(), value.toInt().toShort())
    constructor(x: Double, y: Double, z: Double, w: Double) : this(x.toInt().toShort(), y.toInt().toShort(), z.toInt().toShort(), w.toInt().toShort())
    constructor() : this(0.toShort(), 0.toShort(), 0.toShort(), 0.toShort())
    constructor(lamb: (Int) -> Short) : this(lamb(0), lamb(1), lamb(2), lamb(3))

    operator fun plus(other: SVec4) = SVec4((x + other.x).toShort(), (y + other.y).toShort(), (z + other.z).toShort(), (w + other.w).toShort())
    operator fun plus(other: Short) = SVec4((x + other).toShort(), (y + other).toShort(), (z + other).toShort(), (w + other).toShort())
    operator fun minus(other: SVec4) = SVec4((x - other.x).toShort(), (y - other.y).toShort(), (z - other.z).toShort(), (w - other.w).toShort())
    operator fun minus(other: Short) = SVec4((x - other).toShort(), (y - other).toShort(), (z - other).toShort(), (w - other).toShort())
    operator fun times(other: SVec4) = SVec4((x * other.x).toShort(), (y * other.y).toShort(), (z * other.z).toShort(), (w * other.w).toShort())
    operator fun times(other: Short) = SVec4((x * other).toShort(), (y * other).toShort(), (z * other).toShort(), (w * other).toShort())
    operator fun div(other: SVec4) = SVec4((x / other.x).toShort(), (y / other.y).toShort(), (z / other.z).toShort(), (w / other.w).toShort())
    operator fun div(other: Short) = SVec4((x / other).toShort(), (y / other).toShort(), (z / other).toShort(), (w / other).toShort())
    operator fun rem(other: SVec4) = SVec4((x % other.x).toShort(), (y % other.y).toShort(), (z % other.z).toShort(), (w % other.w).toShort())
    operator fun rem(other: Short) = SVec4((x % other).toShort(), (y % other).toShort(), (z % other).toShort(), (w % other).toShort())
    operator fun unaryPlus() = this
    operator fun unaryMinus() = SVec4(-x, -y, -z, -w)
    operator fun get(idx: Byte): Short {
        require(idx in 0 until 4) { 
            "SVec4 indexing failed. Index should be in the range of 0 to 3 (inclusive) but got ${idx}."
        }
        return when (idx.toInt()) { 0 -> x; 1 -> y; 2 -> z; else -> w }
    }
    operator fun get(idx: Short): Short {
        require(idx in 0 until 4) { 
            "SVec4 indexing failed. Index should be in the range of 0 to 3 (inclusive) but got ${idx}."
        }
        return when (idx.toInt()) { 0 -> x; 1 -> y; 2 -> z; else -> w }
    }
    operator fun get(idx: Int): Short {
        require(idx in 0 until 4) { 
            "SVec4 indexing failed. Index should be in the range of 0 to 3 (inclusive) but got ${idx}."
        }
        return when (idx) { 0 -> x; 1 -> y; 2 -> z; else -> w }
    }
    operator fun get(idx: Long): Short {
        require(idx in 0 until 4) { 
            "SVec4 indexing failed. Index should be in the range of 0 to 3 (inclusive) but got ${idx}."
        }
        return when (idx.toInt()) { 0 -> x; 1 -> y; 2 -> z; else -> w }
    }

    fun toBVec4() = BVec4(x.toByte(), y.toByte(), z.toByte(), w.toByte())
    fun toIVec4() = IVec4(x.toInt(), y.toInt(), z.toInt(), w.toInt())
    fun toLVec4() = LVec4(x.toLong(), y.toLong(), z.toLong(), w.toLong())
    fun toVec4() = Vec4(x.toFloat(), y.toFloat(), z.toFloat(), w.toFloat())
    fun toDVec4() = DVec4(x.toDouble(), y.toDouble(), z.toDouble(), w.toDouble())

    fun eq(other: SVec4) = x == other.x && y == other.y && z == other.z && w == other.w
    fun iter(): Iterator<Short> {
        return object : Iterator<Short> {
            private var idx = 0
            override fun hasNext() = idx < 4
            override fun next() = this@SVec4[idx++]
        }
    }
    fun seq() = iter().asSequence()
    fun abs() = SVec4(abs(x.toInt()).toShort(), abs(y.toInt()).toShort(), abs(z.toInt()).toShort(), abs(w.toInt()).toShort())
    fun mod(value: Short) = SVec4(x.mod(value), y.mod(value), z.mod(value), w.mod(value))
    fun mod(other: SVec4) = SVec4(x.mod(other.x), y.mod(other.y), z.mod(other.z), w.mod(other.w))
    fun min(other: SVec4) = SVec4(min(x.toInt(), other.x.toInt()).toShort(), min(y.toInt(), other.y.toInt()).toShort(), min(z.toInt(), other.z.toInt()).toShort(), min(w.toInt(), other.w.toInt()).toShort())
    fun max(other: SVec4) = SVec4(max(x.toInt(), other.x.toInt()).toShort(), max(y.toInt(), other.y.toInt()).toShort(), max(z.toInt(), other.z.toInt()).toShort(), max(w.toInt(), other.w.toInt()).toShort())
    fun clamp(low: SVec4, high: SVec4) = SVec4(max(min(x.toInt(), high.x.toInt()), low.x.toInt()).toShort(), max(min(y.toInt(), high.y.toInt()), low.y.toInt()).toShort(), max(min(z.toInt(), high.z.toInt()), low.z.toInt()).toShort(), max(min(w.toInt(), high.w.toInt()), low.w.toInt()).toShort())
    fun dot(other: SVec4) = x * other.x + y * other.y + z * other.z + w * other.w
    fun lenSq() = dot(this)
    fun len() = sqrt(lenSq().toFloat())
    fun dist(other: SVec4) = (this.toVec4() - other.toVec4()).len()
    fun distSq(other: SVec4) = (this.toVec4() - other.toVec4()).lenSq()
    fun normalize() = toVec4() / len()
    fun dir() = toVec4() / len()
    fun elementSum() = x + y + z + w
    fun eSum() = x + y + z + w
    fun elementProd() = x * y * z * w
    fun eProd() = x * y * z * w
    fun minElement() = min(min(x.toInt(), y.toInt()), min(z.toInt(), w.toInt())).toShort()
    fun eMin() = min(min(x.toInt(), y.toInt()), min(z.toInt(), w.toInt())).toShort()
    fun maxElement() = max(max(x.toInt(), y.toInt()), max(z.toInt(), w.toInt())).toShort()
    fun eMax() = max(max(x.toInt(), y.toInt()), max(z.toInt(), w.toInt())).toShort()
    fun indexOfMin() = when (eMin()) { x -> 0; y -> 1; z -> 2; else -> 3 }
    fun indexOfMax() = when (eMax()) { x -> 0; y -> 1; z -> 2; else -> 3 }
    fun manhattan(other: SVec4) = (this - other).abs().eSum()
    fun toArray() = shortArrayOf(x, y, z, w)
    fun lerp(other: SVec4, t: Float) = this.toVec4() * (1.0f - t) + other.toVec4() * t
    fun floorDiv(other: SVec4) = SVec4(x.floorDiv(other.x), y.floorDiv(other.y), z.floorDiv(other.z), w.floorDiv(other.w))
    fun floorDiv(other: Short) = SVec4(x.floorDiv(other), y.floorDiv(other), z.floorDiv(other), w.floorDiv(other))

    infix fun and(other: SVec4) = SVec4(x.toInt() and other.x.toInt(), y.toInt() and other.y.toInt(), z.toInt() and other.z.toInt(), w.toInt() and other.w.toInt())
    infix fun and(other: Short) = SVec4(x.toInt() and other.toInt(), y.toInt() and other.toInt(), z.toInt() and other.toInt(), w.toInt() and other.toInt())
    infix fun or(other: SVec4) = SVec4(x.toInt() or other.x.toInt(), y.toInt() or other.y.toInt(), z.toInt() or other.z.toInt(), w.toInt() or other.w.toInt())
    infix fun or(other: Short) = SVec4(x.toInt() or other.toInt(), y.toInt() or other.toInt(), z.toInt() or other.toInt(), w.toInt() or other.toInt())
    infix fun xor(other: SVec4) = SVec4(x.toInt() xor other.x.toInt(), y.toInt() xor other.y.toInt(), z.toInt() xor other.z.toInt(), w.toInt() xor other.w.toInt())
    infix fun xor(other: Short) = SVec4(x.toInt() xor other.toInt(), y.toInt() xor other.toInt(), z.toInt() xor other.toInt(), w.toInt() xor other.toInt())
    infix fun shl(other: SVec4) = SVec4(x.toInt() shl other.x.toInt(), y.toInt() shl other.y.toInt(), z.toInt() shl other.z.toInt(), w.toInt() shl other.w.toInt())
    infix fun shl(other: Short) = SVec4(x.toInt() shl other.toInt(), y.toInt() shl other.toInt(), z.toInt() shl other.toInt(), w.toInt() shl other.toInt())
    infix fun shr(other: SVec4) = SVec4(x.toInt() shr other.x.toInt(), y.toInt() shr other.y.toInt(), z.toInt() shr other.z.toInt(), w.toInt() shr other.w.toInt())
    infix fun shr(other: Short) = SVec4(x.toInt() shr other.toInt(), y.toInt() shr other.toInt(), z.toInt() shr other.toInt(), w.toInt() shr other.toInt())
    infix fun ushr(other: SVec4) = SVec4(x.toInt() ushr other.x.toInt(), y.toInt() ushr other.y.toInt(), z.toInt() ushr other.z.toInt(), w.toInt() ushr other.w.toInt())
    infix fun ushr(other: Short) = SVec4(x.toInt() ushr other.toInt(), y.toInt() ushr other.toInt(), z.toInt() ushr other.toInt(), w.toInt() ushr other.toInt())
    fun inv() = SVec4(x.toInt().inv(), y.toInt().inv(), z.toInt().inv(), w.toInt().inv())

    fun withElement(elementIdx: Int, value: Byte) = when (elementIdx) { 0 -> withX(value); 1 -> withY(value); 2 -> withZ(value); else -> withW(value) }
    fun withElement(elementIdx: Int, value: Short) = when (elementIdx) { 0 -> withX(value); 1 -> withY(value); 2 -> withZ(value); else -> withW(value) }
    fun withElement(elementIdx: Int, value: Int) = when (elementIdx) { 0 -> withX(value); 1 -> withY(value); 2 -> withZ(value); else -> withW(value) }
    fun withElement(elementIdx: Int, value: Long) = when (elementIdx) { 0 -> withX(value); 1 -> withY(value); 2 -> withZ(value); else -> withW(value) }
    fun withElement(elementIdx: Int, value: Float) = when (elementIdx) { 0 -> withX(value); 1 -> withY(value); 2 -> withZ(value); else -> withW(value) }
    fun withElement(elementIdx: Int, value: Double) = when (elementIdx) { 0 -> withX(value); 1 -> withY(value); 2 -> withZ(value); else -> withW(value) }
    fun perm(other: BVec2) = SVec2(this[other.x.toInt()], this[other.y.toInt()])
    fun perm(other: SVec2) = SVec2(this[other.x.toInt()], this[other.y.toInt()])
    fun perm(other: IVec2) = SVec2(this[other.x], this[other.y])
    fun perm(other: LVec2) = SVec2(this[other.x.toInt()], this[other.y.toInt()])
    fun perm(other: BVec3) = SVec3(this[other.x.toInt()], this[other.y.toInt()], this[other.z.toInt()])
    fun perm(other: SVec3) = SVec3(this[other.x.toInt()], this[other.y.toInt()], this[other.z.toInt()])
    fun perm(other: IVec3) = SVec3(this[other.x], this[other.y], this[other.z])
    fun perm(other: LVec3) = SVec3(this[other.x.toInt()], this[other.y.toInt()], this[other.z.toInt()])
    fun perm(other: BVec4) = SVec4(this[other.x.toInt()], this[other.y.toInt()], this[other.z.toInt()], this[other.w.toInt()])
    fun perm(other: SVec4) = SVec4(this[other.x.toInt()], this[other.y.toInt()], this[other.z.toInt()], this[other.w.toInt()])
    fun perm(other: IVec4) = SVec4(this[other.x], this[other.y], this[other.z], this[other.w])
    fun perm(other: LVec4) = SVec4(this[other.x.toInt()], this[other.y.toInt()], this[other.z.toInt()], this[other.w.toInt()])
    fun withX(value: Byte) = SVec4(value.toShort(), y, z, w)
    fun withX(value: Short) = SVec4(value, y, z, w)
    fun withX(value: Int) = SVec4(value.toShort(), y, z, w)
    fun withX(value: Long) = SVec4(value.toShort(), y, z, w)
    fun withX(value: Float) = SVec4(value.toInt().toShort(), y, z, w)
    fun withX(value: Double) = SVec4(value.toInt().toShort(), y, z, w)
    fun withY(value: Byte) = SVec4(x, value.toShort(), z, w)
    fun withY(value: Short) = SVec4(x, value, z, w)
    fun withY(value: Int) = SVec4(x, value.toShort(), z, w)
    fun withY(value: Long) = SVec4(x, value.toShort(), z, w)
    fun withY(value: Float) = SVec4(x, value.toInt().toShort(), z, w)
    fun withY(value: Double) = SVec4(x, value.toInt().toShort(), z, w)
    fun withZ(value: Byte) = SVec4(x, y, value.toShort(), w)
    fun withZ(value: Short) = SVec4(x, y, value, w)
    fun withZ(value: Int) = SVec4(x, y, value.toShort(), w)
    fun withZ(value: Long) = SVec4(x, y, value.toShort(), w)
    fun withZ(value: Float) = SVec4(x, y, value.toInt().toShort(), w)
    fun withZ(value: Double) = SVec4(x, y, value.toInt().toShort(), w)
    fun withW(value: Byte) = SVec4(x, y, z, value.toShort())
    fun withW(value: Short) = SVec4(x, y, z, value)
    fun withW(value: Int) = SVec4(x, y, z, value.toShort())
    fun withW(value: Long) = SVec4(x, y, z, value.toShort())
    fun withW(value: Float) = SVec4(x, y, z, value.toInt().toShort())
    fun withW(value: Double) = SVec4(x, y, z, value.toInt().toShort())

    val xx get() = SVec2(x, x)
    val xy get() = SVec2(x, y)
    val xz get() = SVec2(x, z)
    val xw get() = SVec2(x, w)
    val yx get() = SVec2(y, x)
    val yy get() = SVec2(y, y)
    val yz get() = SVec2(y, z)
    val yw get() = SVec2(y, w)
    val zx get() = SVec2(z, x)
    val zy get() = SVec2(z, y)
    val zz get() = SVec2(z, z)
    val zw get() = SVec2(z, w)
    val wx get() = SVec2(w, x)
    val wy get() = SVec2(w, y)
    val wz get() = SVec2(w, z)
    val ww get() = SVec2(w, w)
    val xxx get() = SVec3(x, x, x)
    val xxy get() = SVec3(x, x, y)
    val xxz get() = SVec3(x, x, z)
    val xxw get() = SVec3(x, x, w)
    val xyx get() = SVec3(x, y, x)
    val xyy get() = SVec3(x, y, y)
    val xyz get() = SVec3(x, y, z)
    val xyw get() = SVec3(x, y, w)
    val xzx get() = SVec3(x, z, x)
    val xzy get() = SVec3(x, z, y)
    val xzz get() = SVec3(x, z, z)
    val xzw get() = SVec3(x, z, w)
    val xwx get() = SVec3(x, w, x)
    val xwy get() = SVec3(x, w, y)
    val xwz get() = SVec3(x, w, z)
    val xww get() = SVec3(x, w, w)
    val yxx get() = SVec3(y, x, x)
    val yxy get() = SVec3(y, x, y)
    val yxz get() = SVec3(y, x, z)
    val yxw get() = SVec3(y, x, w)
    val yyx get() = SVec3(y, y, x)
    val yyy get() = SVec3(y, y, y)
    val yyz get() = SVec3(y, y, z)
    val yyw get() = SVec3(y, y, w)
    val yzx get() = SVec3(y, z, x)
    val yzy get() = SVec3(y, z, y)
    val yzz get() = SVec3(y, z, z)
    val yzw get() = SVec3(y, z, w)
    val ywx get() = SVec3(y, w, x)
    val ywy get() = SVec3(y, w, y)
    val ywz get() = SVec3(y, w, z)
    val yww get() = SVec3(y, w, w)
    val zxx get() = SVec3(z, x, x)
    val zxy get() = SVec3(z, x, y)
    val zxz get() = SVec3(z, x, z)
    val zxw get() = SVec3(z, x, w)
    val zyx get() = SVec3(z, y, x)
    val zyy get() = SVec3(z, y, y)
    val zyz get() = SVec3(z, y, z)
    val zyw get() = SVec3(z, y, w)
    val zzx get() = SVec3(z, z, x)
    val zzy get() = SVec3(z, z, y)
    val zzz get() = SVec3(z, z, z)
    val zzw get() = SVec3(z, z, w)
    val zwx get() = SVec3(z, w, x)
    val zwy get() = SVec3(z, w, y)
    val zwz get() = SVec3(z, w, z)
    val zww get() = SVec3(z, w, w)
    val wxx get() = SVec3(w, x, x)
    val wxy get() = SVec3(w, x, y)
    val wxz get() = SVec3(w, x, z)
    val wxw get() = SVec3(w, x, w)
    val wyx get() = SVec3(w, y, x)
    val wyy get() = SVec3(w, y, y)
    val wyz get() = SVec3(w, y, z)
    val wyw get() = SVec3(w, y, w)
    val wzx get() = SVec3(w, z, x)
    val wzy get() = SVec3(w, z, y)
    val wzz get() = SVec3(w, z, z)
    val wzw get() = SVec3(w, z, w)
    val wwx get() = SVec3(w, w, x)
    val wwy get() = SVec3(w, w, y)
    val wwz get() = SVec3(w, w, z)
    val www get() = SVec3(w, w, w)
    val xxxx get() = SVec4(x, x, x, x)
    val xxxy get() = SVec4(x, x, x, y)
    val xxxz get() = SVec4(x, x, x, z)
    val xxxw get() = SVec4(x, x, x, w)
    val xxyx get() = SVec4(x, x, y, x)
    val xxyy get() = SVec4(x, x, y, y)
    val xxyz get() = SVec4(x, x, y, z)
    val xxyw get() = SVec4(x, x, y, w)
    val xxzx get() = SVec4(x, x, z, x)
    val xxzy get() = SVec4(x, x, z, y)
    val xxzz get() = SVec4(x, x, z, z)
    val xxzw get() = SVec4(x, x, z, w)
    val xxwx get() = SVec4(x, x, w, x)
    val xxwy get() = SVec4(x, x, w, y)
    val xxwz get() = SVec4(x, x, w, z)
    val xxww get() = SVec4(x, x, w, w)
    val xyxx get() = SVec4(x, y, x, x)
    val xyxy get() = SVec4(x, y, x, y)
    val xyxz get() = SVec4(x, y, x, z)
    val xyxw get() = SVec4(x, y, x, w)
    val xyyx get() = SVec4(x, y, y, x)
    val xyyy get() = SVec4(x, y, y, y)
    val xyyz get() = SVec4(x, y, y, z)
    val xyyw get() = SVec4(x, y, y, w)
    val xyzx get() = SVec4(x, y, z, x)
    val xyzy get() = SVec4(x, y, z, y)
    val xyzz get() = SVec4(x, y, z, z)
    val xyzw get() = SVec4(x, y, z, w)
    val xywx get() = SVec4(x, y, w, x)
    val xywy get() = SVec4(x, y, w, y)
    val xywz get() = SVec4(x, y, w, z)
    val xyww get() = SVec4(x, y, w, w)
    val xzxx get() = SVec4(x, z, x, x)
    val xzxy get() = SVec4(x, z, x, y)
    val xzxz get() = SVec4(x, z, x, z)
    val xzxw get() = SVec4(x, z, x, w)
    val xzyx get() = SVec4(x, z, y, x)
    val xzyy get() = SVec4(x, z, y, y)
    val xzyz get() = SVec4(x, z, y, z)
    val xzyw get() = SVec4(x, z, y, w)
    val xzzx get() = SVec4(x, z, z, x)
    val xzzy get() = SVec4(x, z, z, y)
    val xzzz get() = SVec4(x, z, z, z)
    val xzzw get() = SVec4(x, z, z, w)
    val xzwx get() = SVec4(x, z, w, x)
    val xzwy get() = SVec4(x, z, w, y)
    val xzwz get() = SVec4(x, z, w, z)
    val xzww get() = SVec4(x, z, w, w)
    val xwxx get() = SVec4(x, w, x, x)
    val xwxy get() = SVec4(x, w, x, y)
    val xwxz get() = SVec4(x, w, x, z)
    val xwxw get() = SVec4(x, w, x, w)
    val xwyx get() = SVec4(x, w, y, x)
    val xwyy get() = SVec4(x, w, y, y)
    val xwyz get() = SVec4(x, w, y, z)
    val xwyw get() = SVec4(x, w, y, w)
    val xwzx get() = SVec4(x, w, z, x)
    val xwzy get() = SVec4(x, w, z, y)
    val xwzz get() = SVec4(x, w, z, z)
    val xwzw get() = SVec4(x, w, z, w)
    val xwwx get() = SVec4(x, w, w, x)
    val xwwy get() = SVec4(x, w, w, y)
    val xwwz get() = SVec4(x, w, w, z)
    val xwww get() = SVec4(x, w, w, w)
    val yxxx get() = SVec4(y, x, x, x)
    val yxxy get() = SVec4(y, x, x, y)
    val yxxz get() = SVec4(y, x, x, z)
    val yxxw get() = SVec4(y, x, x, w)
    val yxyx get() = SVec4(y, x, y, x)
    val yxyy get() = SVec4(y, x, y, y)
    val yxyz get() = SVec4(y, x, y, z)
    val yxyw get() = SVec4(y, x, y, w)
    val yxzx get() = SVec4(y, x, z, x)
    val yxzy get() = SVec4(y, x, z, y)
    val yxzz get() = SVec4(y, x, z, z)
    val yxzw get() = SVec4(y, x, z, w)
    val yxwx get() = SVec4(y, x, w, x)
    val yxwy get() = SVec4(y, x, w, y)
    val yxwz get() = SVec4(y, x, w, z)
    val yxww get() = SVec4(y, x, w, w)
    val yyxx get() = SVec4(y, y, x, x)
    val yyxy get() = SVec4(y, y, x, y)
    val yyxz get() = SVec4(y, y, x, z)
    val yyxw get() = SVec4(y, y, x, w)
    val yyyx get() = SVec4(y, y, y, x)
    val yyyy get() = SVec4(y, y, y, y)
    val yyyz get() = SVec4(y, y, y, z)
    val yyyw get() = SVec4(y, y, y, w)
    val yyzx get() = SVec4(y, y, z, x)
    val yyzy get() = SVec4(y, y, z, y)
    val yyzz get() = SVec4(y, y, z, z)
    val yyzw get() = SVec4(y, y, z, w)
    val yywx get() = SVec4(y, y, w, x)
    val yywy get() = SVec4(y, y, w, y)
    val yywz get() = SVec4(y, y, w, z)
    val yyww get() = SVec4(y, y, w, w)
    val yzxx get() = SVec4(y, z, x, x)
    val yzxy get() = SVec4(y, z, x, y)
    val yzxz get() = SVec4(y, z, x, z)
    val yzxw get() = SVec4(y, z, x, w)
    val yzyx get() = SVec4(y, z, y, x)
    val yzyy get() = SVec4(y, z, y, y)
    val yzyz get() = SVec4(y, z, y, z)
    val yzyw get() = SVec4(y, z, y, w)
    val yzzx get() = SVec4(y, z, z, x)
    val yzzy get() = SVec4(y, z, z, y)
    val yzzz get() = SVec4(y, z, z, z)
    val yzzw get() = SVec4(y, z, z, w)
    val yzwx get() = SVec4(y, z, w, x)
    val yzwy get() = SVec4(y, z, w, y)
    val yzwz get() = SVec4(y, z, w, z)
    val yzww get() = SVec4(y, z, w, w)
    val ywxx get() = SVec4(y, w, x, x)
    val ywxy get() = SVec4(y, w, x, y)
    val ywxz get() = SVec4(y, w, x, z)
    val ywxw get() = SVec4(y, w, x, w)
    val ywyx get() = SVec4(y, w, y, x)
    val ywyy get() = SVec4(y, w, y, y)
    val ywyz get() = SVec4(y, w, y, z)
    val ywyw get() = SVec4(y, w, y, w)
    val ywzx get() = SVec4(y, w, z, x)
    val ywzy get() = SVec4(y, w, z, y)
    val ywzz get() = SVec4(y, w, z, z)
    val ywzw get() = SVec4(y, w, z, w)
    val ywwx get() = SVec4(y, w, w, x)
    val ywwy get() = SVec4(y, w, w, y)
    val ywwz get() = SVec4(y, w, w, z)
    val ywww get() = SVec4(y, w, w, w)
    val zxxx get() = SVec4(z, x, x, x)
    val zxxy get() = SVec4(z, x, x, y)
    val zxxz get() = SVec4(z, x, x, z)
    val zxxw get() = SVec4(z, x, x, w)
    val zxyx get() = SVec4(z, x, y, x)
    val zxyy get() = SVec4(z, x, y, y)
    val zxyz get() = SVec4(z, x, y, z)
    val zxyw get() = SVec4(z, x, y, w)
    val zxzx get() = SVec4(z, x, z, x)
    val zxzy get() = SVec4(z, x, z, y)
    val zxzz get() = SVec4(z, x, z, z)
    val zxzw get() = SVec4(z, x, z, w)
    val zxwx get() = SVec4(z, x, w, x)
    val zxwy get() = SVec4(z, x, w, y)
    val zxwz get() = SVec4(z, x, w, z)
    val zxww get() = SVec4(z, x, w, w)
    val zyxx get() = SVec4(z, y, x, x)
    val zyxy get() = SVec4(z, y, x, y)
    val zyxz get() = SVec4(z, y, x, z)
    val zyxw get() = SVec4(z, y, x, w)
    val zyyx get() = SVec4(z, y, y, x)
    val zyyy get() = SVec4(z, y, y, y)
    val zyyz get() = SVec4(z, y, y, z)
    val zyyw get() = SVec4(z, y, y, w)
    val zyzx get() = SVec4(z, y, z, x)
    val zyzy get() = SVec4(z, y, z, y)
    val zyzz get() = SVec4(z, y, z, z)
    val zyzw get() = SVec4(z, y, z, w)
    val zywx get() = SVec4(z, y, w, x)
    val zywy get() = SVec4(z, y, w, y)
    val zywz get() = SVec4(z, y, w, z)
    val zyww get() = SVec4(z, y, w, w)
    val zzxx get() = SVec4(z, z, x, x)
    val zzxy get() = SVec4(z, z, x, y)
    val zzxz get() = SVec4(z, z, x, z)
    val zzxw get() = SVec4(z, z, x, w)
    val zzyx get() = SVec4(z, z, y, x)
    val zzyy get() = SVec4(z, z, y, y)
    val zzyz get() = SVec4(z, z, y, z)
    val zzyw get() = SVec4(z, z, y, w)
    val zzzx get() = SVec4(z, z, z, x)
    val zzzy get() = SVec4(z, z, z, y)
    val zzzz get() = SVec4(z, z, z, z)
    val zzzw get() = SVec4(z, z, z, w)
    val zzwx get() = SVec4(z, z, w, x)
    val zzwy get() = SVec4(z, z, w, y)
    val zzwz get() = SVec4(z, z, w, z)
    val zzww get() = SVec4(z, z, w, w)
    val zwxx get() = SVec4(z, w, x, x)
    val zwxy get() = SVec4(z, w, x, y)
    val zwxz get() = SVec4(z, w, x, z)
    val zwxw get() = SVec4(z, w, x, w)
    val zwyx get() = SVec4(z, w, y, x)
    val zwyy get() = SVec4(z, w, y, y)
    val zwyz get() = SVec4(z, w, y, z)
    val zwyw get() = SVec4(z, w, y, w)
    val zwzx get() = SVec4(z, w, z, x)
    val zwzy get() = SVec4(z, w, z, y)
    val zwzz get() = SVec4(z, w, z, z)
    val zwzw get() = SVec4(z, w, z, w)
    val zwwx get() = SVec4(z, w, w, x)
    val zwwy get() = SVec4(z, w, w, y)
    val zwwz get() = SVec4(z, w, w, z)
    val zwww get() = SVec4(z, w, w, w)
    val wxxx get() = SVec4(w, x, x, x)
    val wxxy get() = SVec4(w, x, x, y)
    val wxxz get() = SVec4(w, x, x, z)
    val wxxw get() = SVec4(w, x, x, w)
    val wxyx get() = SVec4(w, x, y, x)
    val wxyy get() = SVec4(w, x, y, y)
    val wxyz get() = SVec4(w, x, y, z)
    val wxyw get() = SVec4(w, x, y, w)
    val wxzx get() = SVec4(w, x, z, x)
    val wxzy get() = SVec4(w, x, z, y)
    val wxzz get() = SVec4(w, x, z, z)
    val wxzw get() = SVec4(w, x, z, w)
    val wxwx get() = SVec4(w, x, w, x)
    val wxwy get() = SVec4(w, x, w, y)
    val wxwz get() = SVec4(w, x, w, z)
    val wxww get() = SVec4(w, x, w, w)
    val wyxx get() = SVec4(w, y, x, x)
    val wyxy get() = SVec4(w, y, x, y)
    val wyxz get() = SVec4(w, y, x, z)
    val wyxw get() = SVec4(w, y, x, w)
    val wyyx get() = SVec4(w, y, y, x)
    val wyyy get() = SVec4(w, y, y, y)
    val wyyz get() = SVec4(w, y, y, z)
    val wyyw get() = SVec4(w, y, y, w)
    val wyzx get() = SVec4(w, y, z, x)
    val wyzy get() = SVec4(w, y, z, y)
    val wyzz get() = SVec4(w, y, z, z)
    val wyzw get() = SVec4(w, y, z, w)
    val wywx get() = SVec4(w, y, w, x)
    val wywy get() = SVec4(w, y, w, y)
    val wywz get() = SVec4(w, y, w, z)
    val wyww get() = SVec4(w, y, w, w)
    val wzxx get() = SVec4(w, z, x, x)
    val wzxy get() = SVec4(w, z, x, y)
    val wzxz get() = SVec4(w, z, x, z)
    val wzxw get() = SVec4(w, z, x, w)
    val wzyx get() = SVec4(w, z, y, x)
    val wzyy get() = SVec4(w, z, y, y)
    val wzyz get() = SVec4(w, z, y, z)
    val wzyw get() = SVec4(w, z, y, w)
    val wzzx get() = SVec4(w, z, z, x)
    val wzzy get() = SVec4(w, z, z, y)
    val wzzz get() = SVec4(w, z, z, z)
    val wzzw get() = SVec4(w, z, z, w)
    val wzwx get() = SVec4(w, z, w, x)
    val wzwy get() = SVec4(w, z, w, y)
    val wzwz get() = SVec4(w, z, w, z)
    val wzww get() = SVec4(w, z, w, w)
    val wwxx get() = SVec4(w, w, x, x)
    val wwxy get() = SVec4(w, w, x, y)
    val wwxz get() = SVec4(w, w, x, z)
    val wwxw get() = SVec4(w, w, x, w)
    val wwyx get() = SVec4(w, w, y, x)
    val wwyy get() = SVec4(w, w, y, y)
    val wwyz get() = SVec4(w, w, y, z)
    val wwyw get() = SVec4(w, w, y, w)
    val wwzx get() = SVec4(w, w, z, x)
    val wwzy get() = SVec4(w, w, z, y)
    val wwzz get() = SVec4(w, w, z, z)
    val wwzw get() = SVec4(w, w, z, w)
    val wwwx get() = SVec4(w, w, w, x)
    val wwwy get() = SVec4(w, w, w, y)
    val wwwz get() = SVec4(w, w, w, z)
    val wwww get() = SVec4(w, w, w, w)

    override fun toString(): String {
        return ("SVec4(" + 
                "x=$x, " + 
                "y=$y, " + 
                "z=$z, " + 
                "w=$w)")
    }

}

operator fun Short.plus(other: SVec4) = SVec4((this + other.x).toShort(), (this + other.y).toShort(), (this + other.z).toShort(), (this + other.w).toShort())
operator fun Short.minus(other: SVec4) = SVec4((this - other.x).toShort(), (this - other.y).toShort(), (this - other.z).toShort(), (this - other.w).toShort())
operator fun Short.times(other: SVec4) = SVec4((this * other.x).toShort(), (this * other.y).toShort(), (this * other.z).toShort(), (this * other.w).toShort())
operator fun Short.div(other: SVec4) = SVec4((this / other.x).toShort(), (this / other.y).toShort(), (this / other.z).toShort(), (this / other.w).toShort())
operator fun Short.rem(other: SVec4) = SVec4((this % other.x).toShort(), (this % other.y).toShort(), (this % other.z).toShort(), (this % other.w).toShort())

fun svec4(value: Byte) = SVec4(value.toShort())
fun svec4(x: Byte, y: Byte, z: Byte, w: Byte) = SVec4(x.toShort(), y.toShort(), z.toShort(), w.toShort())
fun svec4(value: Short) = SVec4(value)
fun svec4(x: Short, y: Short, z: Short, w: Short) = SVec4(x, y, z, w)
fun svec4(value: Int) = SVec4(value.toShort())
fun svec4(x: Int, y: Int, z: Int, w: Int) = SVec4(x.toShort(), y.toShort(), z.toShort(), w.toShort())
fun svec4(value: Long) = SVec4(value.toShort())
fun svec4(x: Long, y: Long, z: Long, w: Long) = SVec4(x.toShort(), y.toShort(), z.toShort(), w.toShort())
fun svec4(value: Float) = SVec4(value.toInt().toShort())
fun svec4(x: Float, y: Float, z: Float, w: Float) = SVec4(x.toInt().toShort(), y.toInt().toShort(), z.toInt().toShort(), w.toInt().toShort())
fun svec4(value: Double) = SVec4(value.toInt().toShort())
fun svec4(x: Double, y: Double, z: Double, w: Double) = SVec4(x.toInt().toShort(), y.toInt().toShort(), z.toInt().toShort(), w.toInt().toShort())
fun svec4() = SVec4()
